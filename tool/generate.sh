#!/bin/zsh

setopt nullglob 

vext="vert"
fext="frag"

# remove all previous headers
find ./data -name "*.h" -type f -delete
find ./src/agh -name "*.h" -type f -delete

#build date
date=$(date +'%-d %b. %Y')
copyyear=$(date +'%y')
# overwrite file
# issue edit warning
echo "// this is an autogenerated file -- don't try to edit it!" > ./src/aghfile.h
echo "#ifndef AGHFILE_H" >> ./src/aghfile.h
echo "#define AGHFILE_H" >> ./src/aghfile.h
echo "// this is an autogenerated file -- don't try to edit it!" > ./src/agh.h

#create "aghdef.h"
echo "// this is an autogenerated file -- don't try to edit it!" > ./src/aghdef.h
echo "#define BUILD_DATE \"$date\"" >> ./src/aghdef.h
echo "#define COPY_YEAR \"$copyyear\"" >> ./src/aghdef.h


if [ $# -gt 0 ]
then

  # tally files
  convert=("./data/font/" "./data/image/")
  retype=("./data/shader/")

  tfiles="0"

  for dir in "${convert[@]}"
  do
      ex=$(find $dir -maxdepth 1 -type f | wc -l)
      tfiles=`expr $tfiles + $ex`
  done

  for dir in "${retype[@]}"
  do
      ex=$(find $dir -maxdepth 1 -type f | wc -l)
      tfiles=`expr $tfiles + $ex`
  done

  echo
  echo "converting $tfiles files"


  # perform conversions

  echo
  echo "binary conversion directories:"

  for dir in "${convert[@]}"
  do
      echo "$dir"
  done

  # create skeleton aghfile.h

  echo "" >> ./src/aghfile.h

  echo "#pragma once" >> ./src/aghfile.h
  echo "" >> ./src/aghfile.h
  echo "#include <string>" >> ./src/aghfile.h
  echo "#include \"asset.h\"" >> ./src/aghfile.h
  #echo "#include \"define.h\"" >> ./src/aghfile.h
  echo "#include \"agh.h\"" >> ./src/aghfile.h
  echo "" >> ./src/aghfile.h
  echo "using std::vector;" >> ./src/aghfile.h
  echo "" >> ./src/aghfile.h
  echo "vector<asset> assetSet = {" >> ./src/aghfile.h


  # move to converting and filling out files 
  echo
  echo "list of converted files:"

  for dir in "${convert[@]}"
  do
    for file in $dir*
    do
      if [[ ! -d "$file" ]]; then
        nfile=$(basename $file)
        nfile=${nfile:0:-4}
        echo "$file → ./src/agh/$nfile.h"
        
        echo "// this is an autogenerated file -- don't try to edit it!" > "./src/agh/$nfile.h"
        echo "" >> "./src/agh/$nfile.h"
        
        echo "#pragma once" >> "./src/agh/$nfile.h"
        echo "" >> "./src/agh/$nfile.h"
        
        # since xxd doesn't like const arrays
        # NOTE: this causes compilation to fail
        #echo -n "const " >> "./src/agh/$nfile.h"
        xxd -i $file >> "./src/agh/$nfile.h"

        genfile=$(echo $file | sed 's/\./_/g' | sed 's/\//_/g')
        genfilelen=$genfile"_len"

        typedec=$(echo "${genfile:7:4}")
        
        typefin="ASSET::IMAGE"
        if [[ $typedec = "font" ]]
        then
          typefin="ASSET::FONT"
        fi

        fileid="$(echo $nfile | tr 'a-z' 'A-Z')"
        #echo "xxd generated name: $genfile, $genfilelen"
        echo "  asset($typefin, \"$fileid\",\n        $genfile, $genfilelen)," >> ./src/aghfile.h
        echo "" >> ./src/aghfile.h
      fi
    done
  done


  echo
  echo "retyped directories:"


  for dir in $retype
  do
    echo $dir
  done

  echo
  echo "list of converted files:"

  for dir in "${retype[@]}"
  do
    #echo $dir* | cut -f1 -d"." | uniq -c
    #mapfile -d '' dirfile < <(find $dir | tail -n +2 | cut -f2 -d"." | uniq -c)
    #keys=$(find $dir | tail -n +2 | cut -f2 -d"." | uniq -c)

    IFS=$'\n'
    dirfile=($(find $dir | tail -n +2 | cut -f2 -d"." | uniq -c))
    unset IFS
    #printf "%s\n" "${dirfile[@]}"

    #echo

    declare -A dict

    for file in ${dirfile[@]}
    do
      IFS=' ' read -rA keyval <<< "$file"
      key=$(basename ${keyval[2]}) 
      val=${keyval[1]}
      dict[$key]=$val
      #for i in "${keyval[@]}"; do
        ## process "$i"
        #echo $i
      #done
      unset IFS
    done

    #echo $dict
    #echo ${(k)dict}
    #echo

    for item occ in ${(kv)dict}
    do
      #echo "$item -> $occ"

      if [[ $occ -eq 1 ]]
      then
        sfile=$(echo $dir$item*)
        fileext=""
        case "$sfile" in
          *.$fext) 
            fileext="$fext"
            ;;
          *.$vext)
            fileext="$vext"
            ;;
          *)
            echo "invalid shader file (need .$vext or .$fext): $sfile"
            exit
            ;;
        esac

        if [[ "$fileext" == "$fext" ]]
        then
          f_sh=$dir$item.$fext
          file=$f_sh 
          nfile=$(basename $f_sh | cut -f1 -d'.')
          echo "$dir$nfile.$fext → ./src/agh/$nfile.h"
          #xxd -i $file > "./src/agh/$nfile.h"
         
          echo "// this is an autogenerated file -- don't try to edit it!" >> "./src/agh/$nfile.h"
          echo "" >> "./src/agh/$nfile.h"
          
          echo "#pragma once" >> "./src/agh/$nfile.h"
          echo "" >> "./src/agh/$nfile.h"
          
          echo "#include <string>" >> "./src/agh/$nfile.h"
          echo "" >> "./src/agh/$nfile.h"
          echo "using std::string;" >> "./src/agh/$nfile.h"
          echo "" >> "./src/agh/$nfile.h"

          uniforms=($(cat $f_sh | grep -i "^uniform" | grep -v "texture0\|colDiffuse" | 
                      sed 's/.*uniform \(.*\).*\(;\|\[\).*/\1/g' | sed -E 's/(.*)\[.*\]/\1/g')) 

          genfile=$(echo $file | sed 's/\./_/g' | sed 's/\//_/g')
          nl=$'\n'
          contents=$(<$file | sed ':a;N;$!ba;s/\n/\\\\n"\n"/g') 
          #echo $contents
          echo "const string $genfile = ">> "./src/agh/$nfile.h"
          echo -n "\"">> "./src/agh/$nfile.h"
          
          # raw string data goes here
          #contents= "$contents\""
          echo -n $contents >> "./src/agh/$nfile.h"
          

          echo "\";">> "./src/agh/$nfile.h"
          
          echo >> "./src/agh/$nfile.h"
          
          typefin="ASSET::SHADER"

          uniformidx=0
          uniforms_final=()
          uniform_partial=""
          for i in ${uniforms[@]}
            do 
              if [[ $((uniformidx % 2)) -eq 0 ]]
              then
                uniform_partial=$(echo -n SHADER_UNIFORM_$i | tr 'a-z' 'A-Z') 
              else
                uniforms_final+=($(echo "{\"$i\",$uniform_partial},\n"))
              fi
              uniformidx=$((uniformidx + 1))
          done

          fileid="$(echo $nfile | tr 'a-z' 'A-Z')"
          #echo "xxd generated name: $genfile, $genfilelen"
          echo "  asset($typefin, \"$fileid\"," >> ./src/aghfile.h
          echo "        reinterpret_cast<unsigned char*>(const_cast<char*>(\"\"))," >> ./src/aghfile.h 
          echo "        reinterpret_cast<unsigned char*>(const_cast<char*>($genfile.c_str()))," >> ./src/aghfile.h
          echo "        vector<uniform>{" >> ./src/aghfile.h
          echo -n "                        " >> ./src/aghfile.h 
          for i in ${uniforms_final[@]}
            do 
              echo -n $i >> ./src/aghfile.h
          done
          echo >> ./src/aghfile.h
          echo "                       }" >> ./src/aghfile.h
          
          echo "  )," >> ./src/aghfile.h
          echo "" >> ./src/aghfile.h

        elif [[ "$fileext" == "$vext" ]]
        then
          v_sh=$dir$item.$vext
          file=$v_sh 
          nfile=$(basename $v_sh | cut -f1 -d'.')
          echo "$dir$nfile.$vext → ./src/agh/$nfile.h"
          #xxd -i $file > "./src/agh/$nfile.h"
         
          echo "// this is an autogenerated file -- don't try to edit it!" >> "./src/agh/$nfile.h"
          echo "" >> "./src/agh/$nfile.h"
          
          echo "#pragma once" >> "./src/agh/$nfile.h"
          echo "" >> "./src/agh/$nfile.h"
          
          echo "#include <string>" >> "./src/agh/$nfile.h"
          echo "" >> "./src/agh/$nfile.h"
          echo "using std::string;" >> "./src/agh/$nfile.h"
          echo "" >> "./src/agh/$nfile.h"

          uniforms=($(cat $v_sh | grep -i "^uniform" | grep -v "texture0\|colDiffuse" | 
                      sed 's/.*uniform \(.*\).*\(;\|\[\).*/\1/g' | sed -E 's/(.*)\[.*\]/\1/g')) 

          genfile=$(echo $file | sed 's/\./_/g' | sed 's/\//_/g')
          nl=$'\n'
          contents=$(<$file | sed ':a;N;$!ba;s/\n/\\\\n"\n"/g') 
          #echo $contents
          echo "const string $genfile = ">> "./src/agh/$nfile.h"
          echo -n "\"">> "./src/agh/$nfile.h"
          
          # raw string data goes here
          #contents= "$contents\""
          echo -n $contents >> "./src/agh/$nfile.h"
          

          echo "\";">> "./src/agh/$nfile.h"
          
          echo >> "./src/agh/$nfile.h"
          
          typefin="ASSET::SHADER"

          uniformidx=0
          uniforms_final=()
          uniform_partial=""
          for i in ${uniforms[@]}
            do 
              if [[ $((uniformidx % 2)) -eq 0 ]]
              then
                uniform_partial=$(echo -n SHADER_UNIFORM_$i | tr 'a-z' 'A-Z') 
              else
                uniforms_final+=($(echo "{\"$i\",$uniform_partial},\n"))
              fi
              uniformidx=$((uniformidx + 1))
          done

          fileid="$(echo $nfile | tr 'a-z' 'A-Z')"
          #echo "xxd generated name: $genfile, $genfilelen"
          echo "  asset($typefin, \"$fileid\"," >> ./src/aghfile.h
          echo "        reinterpret_cast<unsigned char*>(const_cast<char*>(\"\"))," >> ./src/aghfile.h 
          echo "        reinterpret_cast<unsigned char*>(const_cast<char*>($genfile.c_str()))," >> ./src/aghfile.h
          echo "        vector<uniform>{" >> ./src/aghfile.h
          echo -n "                        " >> ./src/aghfile.h 
          for i in ${uniforms_final[@]}
            do 
              echo -n $i >> ./src/aghfile.h
          done
          echo >> ./src/aghfile.h
          echo "                       }" >> ./src/aghfile.h
          
          echo "  )," >> ./src/aghfile.h
          echo "" >> ./src/aghfile.h
        else
          echo "invalid file extension for file $sfile"
          exit
        fi

      elif [[ $occ -eq 2 ]]
      then
        v_sh=$dir$item.$vext
        f_sh=$dir$item.$fext
        arr=($v_sh $f_sh)
        
        nfile=$(basename $v_sh | cut -f1 -d'.')
        #echo "$dir$nfile.($vext|$fext) → ./src/agh/$nfile.h"
        #xxd -i $file > "./src/agh/$nfile.h"
       
        echo "// this is an autogenerated file -- don't try to edit it!" >> "./src/agh/$nfile.h"
        echo "" >> "./src/agh/$nfile.h"
        
        echo "#pragma once" >> "./src/agh/$nfile.h"
        echo "" >> "./src/agh/$nfile.h"
        
        echo "#include <string>" >> "./src/agh/$nfile.h"
        echo "" >> "./src/agh/$nfile.h"
        echo "using std::string;" >> "./src/agh/$nfile.h"
        echo "" >> "./src/agh/$nfile.h"

        uniforms=($(cat $v_sh $f_sh | grep -i "^uniform" | grep -v "texture0\|colDiffuse" | 
                    sed 's/.*uniform \(.*\).*\(;\|\[\).*/\1/g' | sed -E 's/(.*)\[.*\]/\1/g')) 
        for file in ${arr[@]} 
        do

          echo "$file → ./src/agh/$nfile.h"

          
          genfile=$(echo $file | sed 's/\./_/g' | sed 's/\//_/g')
          nl=$'\n'
          contents=$(<$file | sed ':a;N;$!ba;s/\n/\\\\n"\n"/g') 
          #echo $contents
          echo "const string $genfile = ">> "./src/agh/$nfile.h"
          echo -n "\"">> "./src/agh/$nfile.h"
          
          # raw string data goes here
          #contents= "$contents\""
          echo -n $contents >> "./src/agh/$nfile.h"
          

          echo "\";">> "./src/agh/$nfile.h"
          
          echo >> "./src/agh/$nfile.h"
          
          typefin="ASSET::SHADER"
          
        done
        uniformidx=0
        uniforms_final=()
        uniform_partial=""
        for i in ${uniforms[@]}
          do 
            if [[ $((uniformidx % 2)) -eq 0 ]]
            then
              uniform_partial=$(echo -n SHADER_UNIFORM_$i | tr 'a-z' 'A-Z') 
            else
              uniforms_final+=($(echo "{\"$i\",$uniform_partial},\n"))
            fi
            uniformidx=$((uniformidx + 1))
        done

        genfile1=$(echo $v_sh | sed 's/\./_/g' | sed 's/\//_/g')
        genfile2=$(echo $f_sh | sed 's/\./_/g' | sed 's/\//_/g')
        fileid="$(echo $nfile | tr 'a-z' 'A-Z')"
        #echo "xxd generated name: $genfile, $genfilelen"
        echo "  asset($typefin, \"$fileid\"," >> ./src/aghfile.h
        echo "        reinterpret_cast<unsigned char*>(const_cast<char*>($genfile1.c_str()))," >> ./src/aghfile.h
        echo "        reinterpret_cast<unsigned char*>(const_cast<char*>($genfile2.c_str()))," >> ./src/aghfile.h
        echo "        vector<uniform>{" >> ./src/aghfile.h
        echo -n "                        " >> ./src/aghfile.h 
        for i in ${uniforms_final[@]}
          do 
            echo -n $i >> ./src/aghfile.h
        done
        echo >> ./src/aghfile.h
        echo "                       }" >> ./src/aghfile.h
        
        echo "  )," >> ./src/aghfile.h
        echo "" >> ./src/aghfile.h

      else
        echo "ERROR: $item has $occ associated files, but only [1,2] associations allowed"
        exit
      fi

    done

    for file in $dir*
    do
      #echo $file
      #if [[ ! -d "$file" ]]; then
        #nfile=$(basename $file | cut -f1 -d'.')

        #echo "$file → ./src/agh/$nfile.h"
        ##xxd -i $file > "./src/agh/$nfile.h"
       
        #echo "// this is an autogenerated file -- don't try to edit it!" > "./src/agh/$nfile.h"
        #echo "" >> "./src/agh/$nfile.h"
        
        #echo "#pragma once" >> "./src/agh/$nfile.h"
        #echo "" >> "./src/agh/$nfile.h"
        
        #echo "#include <string>" >> "./src/agh/$nfile.h"
        #echo "" >> "./src/agh/$nfile.h"
        #echo "using std::string;" >> "./src/agh/$nfile.h"
        #echo "" >> "./src/agh/$nfile.h"
        
        #genfile=$(echo $file | sed 's/\./_/g' | sed 's/\//_/g')
        #nl=$'\n'
        #contents=$(<$file | sed ':a;N;$!ba;s/\n/\\\\n"\n"/g') 
        ##echo $contents
        #echo "const string $genfile = ">> "./src/agh/$nfile.h"
        #echo -n "\"">> "./src/agh/$nfile.h"
        
        ## raw string data goes here
        ##contents= "$contents\""
        #echo -n $contents >> "./src/agh/$nfile.h"
        

        #echo "\";">> "./src/agh/$nfile.h"
        
        #typefin="ASSET::SHADER"
        #uniforms=($(cat $file | grep -i "^uniform" | grep -v "texture0\|colDiffuse" | 
                    #sed 's/uniform \(.*\)/\1/g' | sed -E 's/(.*)\[.*\]/\1/g' | sed 's/;//g'))
        
        #uniformidx=0
        #uniforms_final=()
        #uniform_partial=""
        #for i in ${uniforms[@]}
          #do 
            #if [[ $((uniformidx % 2)) -eq 0 ]]
            #then
              #uniform_partial=$(echo -n SHADER_UNIFORM_$i | tr 'a-z' 'A-Z') 
            #else
              #uniforms_final+=($(echo "{\"$i\",$uniform_partial},\n"))
            #fi
            #uniformidx=$((uniformidx + 1))
        #done

        #fileid="$(echo $nfile | tr 'a-z' 'A-Z')"
        ##echo "xxd generated name: $genfile, $genfilelen"
        #echo -n "  asset($typefin, \"$fileid\", 
        #reinterpret_cast<unsigned char*>(const_cast<char*>($genfile.c_str())), vector<uniform>{" >> ./src/aghfile.h
        #for i in ${uniforms_final[@]}
          #do 
            #echo -n $i >> ./src/aghfile.h
        #done
        #echo "}" >> ./src/aghfile.h
        
        #echo ")," >> ./src/aghfile.h
        #echo "" >> ./src/aghfile.h
      #fi
    done
  done
  
  # closing bracket for definition of assetSet
  echo "};" >> ./src/aghfile.h

  echo
  echo "creating condensed header file ./src/agh.h"
 
  echo "" >> ./src/agh.h
  echo "#pragma once" >> ./src/agh.h
  echo "" >> ./src/agh.h

  for file in ./src/agh/*
  do
    ex=${file:6}

    ex="#include \"$ex\""
    
    echo $ex >> ./src/agh.h

  done


  #find ./src/data -type f -name '*.*' -printf '%p\0' | echo -

  #find ./src/data -type f -exec xxd -i {} > {}.h \;  
  #while IFS= read -r -d '' file; do
  #    ex="$file.h"
  #    xxd -i >> ex
  #done

  #for f in $(find ./src/data -print0)
  #do
  #   #xxd -u $f | grep ABCD
  #   echo $f
     #xxd -i $f
  #done#

  echo "#endif //AGHFILE_H" >> ./src/aghfile.h
  
  echo
  echo "successfully performed asset-to-header conversion"

  echo
else
  # for cleanup
  echo "" >> ./src/aghfile.h
  echo "#include <vector>" >> ./src/aghfile.h
  echo "#include \"asset.h\"" >> ./src/aghfile.h
  echo "" >> ./src/aghfile.h
  echo "vector<asset> assetSet = {};" >> ./src/aghfile.h
  echo "#endif //AGHFILE_H" >> ./src/aghfile.h
fi
