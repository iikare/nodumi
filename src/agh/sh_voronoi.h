// this is an autogenerated file -- don't try to edit it!

#pragma once

#include <string>

using std::string;

const string __data_shader_sh_voronoi_vs = 
"#version 330\n"
"\n"
"in vec2 fragTexCoord;\n"
"\n"
"uniform int vertex_count;\n"
"uniform vec2 vertex_data[496];\n"
"uniform vec3 vertex_color[496];\n"
"uniform float render_bound;\n"
"\n"
"out vec4 finalColor;\n"
"\n"
"void main() {\n"
"    vec2 st = fragTexCoord;\n"
"\n"
"    if (st.y <= render_bound) {\n"
"      discard;\n"
"    }\n"
"\n"
"\n"
"    float min_dist = 2.0f;\n"
"    int min_index = 0;\n"
"    float min_dist_next = 2.0f;\n"
"    int min_index_next = 0;\n"
"\n"
"    // flip normals\n"
"    st.y = 1.0f-st.y;\n"
"\n"
"    // naive O(n^2) implementation\n"
"    for (int i = 0; i < vertex_count; i++) {\n"
"        float dist = distance(st, vertex_data[i]);\n"
"        if (dist < min_dist) {\n"
"            min_dist_next = min_dist;\n"
"            min_index_next = min_index;\n"
"            min_dist = dist;\n"
"            min_index = i;\n"
"        }\n"
"    }\n"
"\n"
"    // color by track of nearest note\n"
"    vec3 color = vertex_color[min_index];\n"
"\n"
"    const float sepRatio = 1.1;\n"
"\n"
"    // bounded by [1.0, sepRatio]\n"
"    const float sepFilterRatio = sepRatio-0.001;\n"
"    const float sepScale = 1/(sepRatio-sepFilterRatio);\n"
"\n"
"    float alpha = 1.0f;\n"
"    float darkScale = 1.0f;\n"
"\n"
"    // cell separator\n"
"    if (min_dist_next / min_dist > sepRatio) {\n"
"      color = vec3(1.0f);\n"
"    }\n"
"    else if (min_dist_next / min_dist > sepFilterRatio) {\n"
"      // min_dist_next/min_dist in range 1<[sepFilterRatio, sepRatio]\n"
"      color = mix(color, vec3(1.0f), sepScale*((min_dist_next/min_dist)-sepFilterRatio));\n"
"      //darkScale += sepScale*((min_dist_next/min_dist)-sepFilterRatio)/2;\n"
"    }\n"
"    else if (min_dist_next / min_dist < 1.0001){// && min_dist_next / min_dist > 1.00005){\n"
"      //alpha = mix(0.5f, 1.0f, sepScale*((min_dist_next/min_dist)-sepFilterRatio));\n"
"      //color = mix(color, vec3(1.0f), sepScale*((min_dist_next/min_dist)-sepFilterRatio));\n"
"      //color = mix(color, vec3(1.0f), sepScale*((min_dist_next/min_dist)-sepFilterRatio));\n"
"      //darkScale += sepScale*((min_dist_next/min_dist)-sepFilterRatio)/2;\n"
"    }\n"
"\n"
"    vec3 max_darken = vec3(clamp(min_dist*darkScale, 0.0f, 1.0f));\n"
"    color -= max_darken;\n"
"    //color -= vec3(min_dist*darkScale);\n"
"    color = clamp(color, vec3(0.0f), vec3(1.0f));\n"
"    finalColor = vec4(color, alpha);\n"
"}";

